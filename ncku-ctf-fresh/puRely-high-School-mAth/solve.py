from sympy import mod_inverse

x = 1
N = 74589377388479220256395124274755513621718001102938856092310626864216100145712997319914585852060516860124385965515331225191123640248815762375637061146158019710356354182927130436015567384589212130141604217421596634528636808019529188666442648153861134305235629996965542430142123282353328395170876196825775920311489204406316187516031426539335287082312293247953584850084586734086698849529182812144565314967419394593384813521249211428140352535373332471130679778470381067853395230164047935419526274875409265972962207414724607294335787238466834759816597980106867778766429397286635717142518810137545341313002078785183519807611849582375914565184651868791970435568273838266325138228060847909410186134993056874695784606042850167617165347780472076237226645613353060515144044347183509
# since N = (p1) * (p2) * ... * (p5)
# and the given x is the product of the first 5 primes with the form: (x - p1) * (x - p2) * ... * (x - p5)
# since the p1, p2, ..., p5 are all primes, with the eular function phi, we can get the equation:
# so phi = (p1 -1) * (p2 - 1) * ... * (p5 - 1), so we can calculate phi by using the given x with 1
# phi = x ** 5 + (-48119449238959664064431388056848262083443351598010876486005413980899245102862943274432647312446266822103926556526300888806856941814195140033426532726966437) * x ** 4 + (916316390865283052868626470361843430815918523848362242777583162414894410696655556195550888998755174145739138567507614480869166751184302565410999041546991684138302351523261989111053193108570521027783948023551076049920890841240287983163459408048895095207456456247472660472441658241455701549473898214907795655566) * x ** 3 + (-8636441083905369069858042281233210939562373326826279452527134344325437120207426211765124178977354188033445775815868821763452710446707060837775101016795669592871763575334601044113835411901379743007595478612376693938561710975476581723590556220834011539105796136301231814195401206505414231054318174488622722611340281691158586557161782841515451050936630513236286511377050950331199002595328681947245303725234202732723544835902211707232831601361506113973845429026225606) * x ** 2 + (40312004179206688223872932025775480226076597343501861181532840272255094576634732415718100509136108879304510567702820703769197754909358459712403222683623066785661752598760763311650855902676830718134590209890586323292552227718091854684669628811126859486800060644183161968857476110122249234590895222131484100414587817486822592070046579831077159138144024860101119755482238856711941887533623456728755956754709985164455397940606771505768608528432853163841570748594353864364499997324136790864192493779011411411989999335219283264251298131077179324522557444743603629333420644593175780239045402537439673048420430564984413432945) * x + -74589377388479220256395124274755513621718001102938856092310626864216100145712997319914585852060516860124385965515331225191123640248815762375637061146158019710356354182927130436015567384589212130141604217421596634528636808019529188666442648153861134305235629996965542430142123282353328395170876196825775920311489204406316187516031426539335287082312293247953584850084586734086698849529182812144565314967419394593384813521249211428140352535373332471130679778470381067853395230164047935419526274875409265972962207414724607294335787238466834759816597980106867778766429397286635717142518810137545341313002078785183519807611849582375914565184651868791970435568273838266325138228060847909410186134993056874695784606042850167617165347780472076237226645613353060515144044347183509
phi = 74589377388479220256395124274755513621718001102938856092310626864216100145712997319914585852060516860124385965515331225191123640248815762375637061146157979398352174976238906563083541609108986053544260715560415101688364552924952553934026930053351998196356325486397839609438354084598419036711163793603092297253339983737622795822577817964665821191156531984569973716288428526184417877881924354280878367085286782566186406175149175715482940732845802413683649311165635156591281117623526064327060247774220049037173736545103041410878371377645186204394229894095125852712915339051359416951933378867679955211591000704016101073451747920424613387630890852677382166655907929153263755731803040032536116365876996079520943144998778845343796091768273185216136293414456420193636113891287040
# print(phi)
e = 0x10001
c = 54372310422162708341909396227965961183075164626326017773456004764517207663829886720623601526357940251610660533163860948135456347826467002370324727678431322843031819718926459976753216927837967564953040402801257157084240349840883660989458820207012640721444852382837830533899879003788144950945681915970342254477344117298735514768937873088362985771838877041100278220389071111435319778351229795816490844209035434932113804441265743033999566002298838065894108562631005641425579848020654904227888485997533351392857727661036462725934031024681823937663271763906242364330796951143526976524873317993082339057106782776240418315046104198751660443814428478898635416762507143880424277125109381932855364490688177651782201815223200292490592250478205144562150126028403166082872900689137986
d = mod_inverse(e, phi)

M = pow(c, d, N)

from Crypto.Util.number import long_to_bytes
decrypted_bytes = long_to_bytes(M)
print(decrypted_bytes.decode(errors='replace'))  # Attempt to decode the bytes to a readable string